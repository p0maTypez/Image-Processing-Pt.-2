# -*- coding: utf-8 -*-
"""color_segmentation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SHwY3zxyBqC-BZMthZgIy0O-nfXBmGr9

HSI Histogram Equalization
"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import exposure, color, io

# Load the HSI color image
image = io.imread('/content/drive/MyDrive/Images/18.bmp') # 5,6,14,18

# Convert the image to HSI color space
hsi_image = color.rgb2hsv(image)

# Separate the Hue, Saturation, and Intensity channels
hue = hsi_image[:, :, 0]
saturation = hsi_image[:, :, 1]
intensity = hsi_image[:, :, 2]

# Perform histogram equalization on the intensity channel
equalized_intensity = exposure.equalize_hist(intensity)

# Create a new HSI image with the equalized intensity
equalized_hsi_image = np.stack((hue, saturation, equalized_intensity), axis=-1)

# Convert the equalized HSI image back to RGB color space
equalized_rgb_image = color.hsv2rgb(equalized_hsi_image)

# Display original and equalized images
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(image)
ax[0].set_title('Original Image')

ax[1].imshow(equalized_rgb_image)
ax[1].set_title('Histogram Equalized Image')

plt.show()

plt.imshow(hue,cmap="gray")

plt.imshow(saturation,cmap="gray")

plt.imshow(intensity, cmap="gray")

"""RGB Histogram Equalization"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import exposure, io

# Load the RGB color image
image = io.imread('/content/drive/MyDrive/Images/18.bmp')

# Perform histogram equalization on each color channel separately
equalized_red = exposure.equalize_hist(image[:, :, 0])
equalized_green = exposure.equalize_hist(image[:, :, 1])
equalized_blue = exposure.equalize_hist(image[:, :, 2])

# Create a new RGB image with the equalized color channels
equalized_image = np.stack((equalized_red, equalized_green, equalized_blue), axis=-1)

# Display original and equalized images
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(image)
ax[0].set_title('Original Image')

ax[1].imshow(equalized_image)
ax[1].set_title('Histogram Equalized Image')

plt.show()

plt.imshow(image[:, :, 2],cmap="gray")

"""Canny Edge Detector"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color, feature

# Load the RGB color image
image = io.imread('9.bmp')

# Convert the image to grayscale
gray_image = color.rgb2gray(image)

# Perform Canny edge detection on the grayscale image
edges = feature.canny(gray_image)

# Display original and edge-detected images
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(image)
ax[0].set_title('Original Image')

ax[1].imshow(edges, cmap='gray')
ax[1].set_title('Edge Detected Image')

plt.show()

"""Color Image Softing"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, filters

# Load the RGB color image
image = io.imread('/content/drive/MyDrive/Images/9.bmp')

# Apply Gaussian smoothing to the image
smoothed_image = filters.gaussian(image, sigma=4, multichannel=True)

# Display original and smoothed images
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(image)
ax[0].set_title('Original Image')

ax[1].imshow(smoothed_image)
ax[1].set_title('Smoothed Image')

plt.show()

"""Pseudo Color Image"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import color, io

# Load the gray-level image
gray_image = io.imread('/content/drive/MyDrive/Images/5.bmp', as_gray=True)

# Apply a colormap to convert the gray-level image to a pseudo-color image
pseudo_color_image = plt.cm.jet(gray_image)

# Display the pseudo-color image
fig, axes = plt.subplots(1, 2, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(gray_image, cmap="gray")
ax[0].set_title('Original Image')

ax[1].imshow(pseudo_color_image)
ax[1].set_title('Pseudo-Color Image')

plt.show()

"""Sobel Edge Detection"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, color, filters

# Load the gray-level image
gray_image = io.imread('/content/drive/MyDrive/Images/building.tif', as_gray=True)

# Apply the Sobel filter to the gray-level image
sobel_imageH = filters.sobel_h(gray_image)
sobel_imageV = filters.sobel_v(gray_image)
sobel_image = filters.sobel(gray_image)

# Display the original and Sobel-filtered images
fig, axes = plt.subplots(1, 4, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title('Original Gray-Level Image')
ax[0].axis('off')

ax[1].imshow(sobel_imageH, cmap='gray')
ax[1].set_title('Sobel_H Filtered Image')
ax[1].axis('off')

ax[2].imshow(sobel_imageV, cmap='gray')
ax[2].set_title('Sobel_V Filtered Image')
ax[2].axis('off')

ax[3].imshow(sobel_image, cmap='gray')
ax[3].set_title('Sobel Filtered Image')
ax[3].axis('off')

plt.show()

"""Laplacian Filter"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import color, filters, io
from skimage.transform import rescale, resize, downscale_local_mean
# Load the gray-level image
gray_image = io.imread('/content/drive/MyDrive/Images/log.tif', as_gray=True)

# Apply Laplacian filter
laplacian_image = filters.laplace(gray_image)
# Logarithmic
laplacian_image2 = exposure.rescale_intensity(laplacian_image,in_range=(0, 255))

# Display original and processed images
fig, axes = plt.subplots(1, 2, figsize=(10, 5))
ax = axes.ravel()

ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title('Original Noisy Gray-Level Image')
ax[0].axis('off')

ax[1].imshow(laplacian_image2, cmap='gray')
ax[1].set_title('Laplacian Edge Detection')
ax[1].axis('off')

plt.show()

"""LOG Filter"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import color, filters, io

# Load the gray-level image
gray_image = io.imread('/content/drive/MyDrive/Images/log.tif', as_gray=True)

# Apply Gaussian smoothing
smoothed_image = filters.gaussian(gray_image, sigma=5.0)

# Apply Laplacian filter
laplacian_image = filters.laplace(smoothed_image)

laplacian_image = exposure.rescale_intensity(laplacian_image,in_range=(0, 255))

# Display original and processed images
fig, axes = plt.subplots(1, 3, figsize=(12, 6))
ax = axes.ravel()

ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title('Original Noisy Gray-Level Image')
ax[0].axis('off')

ax[1].imshow(smoothed_image, cmap='gray')
ax[1].set_title('Gaussian Smoothing')
ax[1].axis('off')

ax[2].imshow(laplacian_image, cmap='gray')
ax[2].set_title('Laplacian of Gaussian (LoG) Filtered Image')
ax[2].axis('off')

plt.show()

"""Thresholding"""

import numpy as np
import matplotlib.pyplot as plt
from skimage import io, filters

# Load the gray-level image
gray_image = io.imread('/content/drive/MyDrive/Images/building.tif')

# Apply thresholding to the image
threshold_value = 10  # Adjust this threshold value as needed
thresholded_image = gray_image < threshold_value

# Display original and thresholded images
fig, axes = plt.subplots(1, 2, figsize=(10, 5))
ax = axes.ravel()

ax[0].imshow(gray_image, cmap='gray')
ax[0].set_title('Original Gray-Level Image')
ax[0].axis('off')

ax[1].imshow(thresholded_image, cmap='binary')
ax[1].set_title('Thresholded Image (Threshold = {})'.format(threshold_value))
ax[1].axis('off')

plt.show()

gray_image.min()

gray_image.max()

